name: "Complete MLOps workflow"

on:
  push:
    paths:
      # trigger op deze bestanden
      - 'workdir_model_training/**.py'
      - 'workdir_model_training/**.txt'
      - 'workdir_model_training/data/BankNote_Authentication.csv'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'app/**.py'
  # maak handmatig starten van de workflow ook mogelijk
  workflow_dispatch:

jobs:
  # analiseer de python source op vulnerabilities
  analyze:
    # voorkom parallel jobs
    concurrency:
      group: mlops_workflow
      cancel-in-progress: true
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build:
    # voorkom parallel jobs
    concurrency:
      group: mlops_workflow
      cancel-in-progress: true
    name: Train the logistic regression model
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      # install the libs, train the model and push the serialized object to github
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Retrain the model
        run: python workdir_model_training/logistische-regressie.py
      - name: Copy the file from the runner to the repo
        run: |
          git config --global user.email "marcel@siebes.nl"
          git config --global user.name "MarcelSiebes"
          git add workdir_model_training/logistische-regressie.pkl
          git commit -m "new trained model"
          git push

  build-and-deploy:
    # voorkom parallel jobs
    concurrency:
      group: mlops_workflow
      cancel-in-progress: true
    name: build the docker image and deploy it to Azure
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main     
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/containerpoc:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/containerpoc:${{ github.sha }}
      - name: 'Deploy to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/containerpoc:${{ github.sha }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-containerpoc
          location: 'west us'
          ports: 80 8000